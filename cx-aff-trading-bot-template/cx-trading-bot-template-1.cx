package main

var coco i32

type Report struct {
	trades []f64
	sells i32
	buys i32
	stay i32
}

func realFn (vc f64, min f64, max f64) (out f64){
	//out = 100.00 * (vc - min)/(max-min)
}

func tradingBot (n f64) (out f64){
	// set of rules that will evolve
	var res f64

	res = n - 100.00D
	if (res < 300.00D){
		out = 1.00D
	}
	if ( res < 50D && res < 60D ){
		out = 0.00D
	} 
	if ( res > 500.00D ){
		out = -1.00D
	} 
}

func getMarketPrice(n i32) (out []f64) {
	// Generate Random Market Price 
	var rnum f64
	str.print("============Generating Random Market Price==========")
		
	for c:=0; c < n; c++{

		rnum =  f64.rand(1, 2)

		if(rnum > 0.50D){ 
			out = append(out, rnum * 1000.00D)
			f64.print(rnum * 1000.00D)
		}

		if (rnum < 0.50D){ 
			out = append(out, rnum * 900.00D)
			f64.print(rnum * 900.00D)
		}
	} 
} 


func play(inps []f64, numPoints i32, sells i32, buys i32, stay i32){

	var res f64
	var	report Report
	
	str.print("==========TradingBot Starts==========")
		for c:=0; c<numPoints; c++{
			printf("%f\n", tradingBot(inps[c]))	
			res = tradingBot(inps[c])
			if(res == 1.00D){
				report.trades = append(report.trades, res)
				buys = buys + 1
				report.buys = buys
			}
			if(res == 0.00D){
				report.trades = append(report.trades, res)
				stay = stay + 1
				report.stay = stay
			}
			if(res == -1.00D){
				report.trades = append(report.trades, res)
				sells = sells + 1
				report.sells = sells
			}
		}
	str.print("=========Analysis of the Trading Bot==========")
	
	//printf("%v\n", report)
	//report
}

func main () (out f64){

	var numPoints i32
	var inps []f64
	var outs []f64
	var sells i32
	var buys i32
	var stay i32
	
	inps = getMarketPrice(100)
	numPoints = len(inps)	
	i32.print(numPoints)
	sells = 0
	buys = 0
	stay = 0
	
	play(inps, numPoints, sells, buys, stay)
	
	
	//var target aff
	//target = -> {pkg(main) fn(tradingBot)}
	
	//var fnBag aff
	//fnBag = ->{fn(f64.add) fn(f64.mul) fn(f64.sub) fn(f64.div)}
	
	// send to evolution
	//evolve(target, fnBag, inps, outs, 5, 100, 0.1D)
	
	//str.print("Testing evolve solution")
	//for i=0; i < numPoints; i++ {
	//printf("%f\n", tradingBot(inps[c]))
	//} 
}
